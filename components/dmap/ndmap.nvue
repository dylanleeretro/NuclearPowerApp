<template>
	<div class="main" style="width:100%;height:1000px">
        <div id="left-map" class="left-map" style="width:100%;height:100%"  element-loading-text="拼命加载中">
        </div>
        <div id="popup" ref="popup" class="ol-popup" style="color:#060000" v-show="stationShow">{{popupText}}
            <a href="#" id="popup-closer" ref="popCloser" class="ol-popup-closer"></a>
            <hr>
            <div id="popup-content" ref="popContent"></div>
        </div>		
	</div>
</template>

<script>
	import {
		post,
		get,
		getParams
	} from "../../common/util.js"	
	import 'ol/ol.css'
    import 'ol-layerswitcher/src/ol-layerswitcher.css'
	import { Map, View, Feature, Overlay} from 'ol'
	import {Tile, Vector, Image} from'ol/layer'
	import {XYZ, TileImage, ImageWMS, ImageCanvas, Vector as sVector} from 'ol/source'
	import {Point, Polygon, LineString} from 'ol/geom'
	import {circular, fromExtent} from 'ol/geom/Polygon'
    import LayerGroup from 'ol/layer/Group'
	import {Style, Fill, Stroke, Text, Circle, Icon} from 'ol/style'
	import {GeoJSON, } from 'ol/format'
    import LayerSwitcher from 'ol-layerswitcher'	
	
	
	export default {
        data() {
            return {
				data:[],
                loading: true,
                stationShow: false,
                attributeShow: true,
                popupText: 'N/A',
				url: '/api/Site/',
                url_type: 'api/space_geographical_type/',
                url_ply: 'api/space_space_data/',
                webKey: 'be754f986c0a3eb6af4f03023cb4d42b',// 个人key
                id: '',
				resData: [],
                typeId: '',
				basemap: null,
				layerList: null,
				projection: null,
				markerVectorLayer: null,
                nuMarkerVectorLayer: null,
                preMarkerVectorLayer: null,
                baMarkerVectorLayer: null,
                ofMarkerVectorLayer: null,
                nvStringLayer: null,
                depthContourLayer: null,
                polyFeature: null,
                plyVectorLayer: null,
				pointcoordinates: [],
                pointFeature: null,
                krigingPly: null,
                krigingLayers: null,
                markers: [],
                nuMarkers: [],
                preMarkers: [],
                baMarkers: [],
                ofMarkers: [],
				map_center: [120.5, 27.],
				hd_center:[120.27724,27.040124],//[120.27724,27.040124],
				layerDis:null,
                mapLayers:{},
				seaPs: null,
				krigingLayer: null,
				navRoute: '',
                siteOn: false,
                navList:[
                    {
                        name:'基础地理信息图层',
                        router:'',
                        icon: '',
                        children:[{
                            name: '监测站点',
                            router: 'getSitePoint',
                            icon: 'iconfont icon-jianceshuju1',
                            checked: false,
                            layername: "siteLayer"
                        },{
                            name: '核电站',
                            router: 'getNuclear',
                            icon: 'iconfont icon-jianceshuju1',
                            checked: false,
                            layername: "nuclearLayer"
                        },{
                            name: '功能区',
                            router: 'getFunctional',
                            icon: 'iconfont icon-jianceshuju1',
                            checked: false,
                            layername: "functionalLayer"
                        },{
                            name: '保护区',
                            router: 'getPreserves',
                            icon: 'iconfont icon-jianceshuju1',
                            checked: false,
                            layername: "preservesLayer"
                        },{
                            name: '领海基线',
                            router: 'getNavigation',
                            icon: 'iconfont icon-jianceshuju1',
                            checked: false,
                            layername: "navigationLayer"
                        },{
                            name: '等深线',
                            router: 'getDepthContour',
                            icon: 'iconfont icon-jianceshuju1',
                            checked: false,
                            layername: "DepthContourLayer"
                        },{
                            name: '海水浴场',
                            router: 'getBath',
                            icon: 'iconfont icon-jianceshuju1',
                            checked: false,
                            layername: "BathLayer"
                        },{
                            name: '排污口',
                            router: 'getOutfall',
                            icon: 'iconfont icon-jianceshuju1',
                            checked: false,
                            layername: "outfallLayer"
                        }]
                    },{
                        name:'环境监测数据',
                        router:'s',
                        icon: '',
                        children:[{
                            name: '水质评价数据',
                            router: 'showWater2',
                            icon: 'iconfont icon-jianceshuju1',
                            checked: false,
                            layername: "KrigingLayer"
                        },{
                            name: '沉积物评价结果',
                            router: 'showWater2',
                            icon: 'iconfont icon-jianceshuju1',
                            checked: false,
                            layername: "KrigingLayer"
                        },{
                            name: '生物多样性评价',
                            router: 'showWater2',
                            icon: 'iconfont icon-jianceshuju1',
                            checked: false,
                            layername: "KrigingLayer"
                        }]
                    }
                ],
			}
        },	
		created() {

		},
		mounted() {
			this.initmap()
			//this.doPopup()
			//this.loading = false
			// this.$initHeight()
			// this.getPoint()
		},
		methods: {
			initmap() {
					const td_layer = [
						new LayerGroup({
							title: '矢量底图',
							layers: [
								new Tile({
									title: "天地图",
									source: new XYZ({
										// url : "http://t{0-6}.tianditu.com/DataServer?T=vec_w&REQUEST=GetTile&VERSION=1.0.0&LAYER=cva&STYLE=default&TILEMATRIXSET=w&FORMAT=tiles&x={x}&y={y}&l={z}&tk=8a45f3c67c839d86c1f63c193e370066",
										url : "http://t{0-6}.tianditu.gov.cn/DataServer?T=vec_w&REQUEST=GetTile&VERSION=1.0.0&LAYER=cva&STYLE=default&TILEMATRIXSET=w&FORMAT=tiles&x={x}&y={y}&l={z}&tk=" + this.webKey,
										wrapX:false,
									})
								}),
								new Tile({
									title: "标记",
									source: new XYZ({
										//url: "http://t{0-6}.tianditu.gov.cn/cia_w/wmts?x={x}&y={y}&l={z}&tk=8a45f3c67c839d86c1f63c193e370066",
										// url: "http://t{0-6}.tianditu.com/DataServer?T=cva_w&x={x}&y={y}&l={z}&tk=8a45f3c67c839d86c1f63c193e370066",
										url: "http://t{0-6}.tianditu.gov.cn/DataServer?T=cva_w&x={x}&y={y}&l={z}&tk=" + this.webKey,
										wrapX:false,
										//
									}),
								})
							]
						})
					]
					this.basemap = new Map({
						target: 'left-map',
						layers: td_layer,
						view: new View({
							center:this.map_center,
							zoom: 11,
							projection:　"EPSG:4326"
						})
					})
					this.projection = this.basemap.getView().getProjection();
					console.log(this.projection)
					
					//this.layerDis = new LayerGroup({title: '缓冲区', layers: [this.DefineDistCircle(100000)]})
					//this.basemap.addLayer(this.layerDis)
					// this.basemap.addControl(layerSwitcher)
					this.getSitePoint()
				},		
				getSitePoint () {
					const marker = []
					const name = '宁德监测站点'
					let coor = []
					let coors = []
					
					get(this.url_type + '?name=' + name, {
						success: (res) => {
							const id = res.data.results[0].id
							let jsonData = res.data.results[0].file
							jsonData = jsonData.replace(/^http:\/\/[^/]{3,255}/g, '')
							console.log(jsonData)
							get(jsonData).then(res =>{
								const features = res.data.features
								const num = features.length
								console.log('一共'+ num + '个点')
								for (const feature of features) {
									const siteId = feature.attributes.站位编号
									const x = feature.geometry.x
									const y = feature.geometry.y
									coor = [x,y]
									const site = [coor, siteId, x, y]
									coors.push(site)
								}
								for (const site of coors) {
									let feature = new Feature({geometry: new Point(site[0]), geometryName: site[1], geometryName_: 'site', lng: site[2], lat: site[3]})
									marker.push(feature)
								}
								this.markers = marker
								const vectorSource = new sVector({features: this.markers})
								const layer = new Vector({title: '站点', source: vectorSource})
								this.markerVectorLayer = new LayerGroup({title: '矢量点', layers: [layer]})
								this.basemap.addLayer(this.markerVectorLayer)
								this.siteOn = true
								this.mapLayers['siteLayer'] = this.markerVectorLayer
								this.stationShow = ! this.stationShow
							})
						}
				})					
			}				
		}
	}
</script>

<style>
	.main {
		width: 100%;
		height: 100%;
	}
	.left-map {
		background-color: #F5F5F5;
		box-sizing: border-box;
		float: left;
		width: 100%;
		height: calc(100% - 2px);
		padding: 10px, 10px, 0px, 0px;
		border: 2px solid rgba(22, 99, 180, 1);
		border-radius: 0 10px 10px 0;
		width: 100%;
		overflow: hidden;
	}
</style>
